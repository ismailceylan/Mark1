define(["./trait","../helper/argument/arg","../helper/typo/capitalize"],function(Trait,arg,capitalize){return function Type(name){if(!(this instanceof Type))return new Type(name);if(!is(name,"nameable"))throw TypeError("İlk argüman geçerli bir tür adı olmalıdır!");var root=this;function renameTraitConstructMethod(t){t.properties.construct&&(t.properties["construct"+t.name+"Trait"]=t.properties.construct,delete t.properties.construct)}function extendPrototype(t){return Object.assign(root.constructor.prototype,t),root}function renameTraitMethods(){var t,e=root.constructor.prototype;if(t=e.AS){for(var i in t){e[t[i]]=e[i],delete e[i]}delete e.AS}}function handleStaticProps(){var t=root.constructor,e=t.prototype;if("static"in e){if("pass"in e.static)return delete e.static.pass;Object.assign(t,e.static),delete e.static}}function inherit(t){var e=root.constructor.prototype,i=["toString","toStringTag","toLocaleString","toSource","valueOf","toPrimitive"];for(var r in t)r in e&&i.indexOf(r)<0||(e[r]=t[r])}function callTraitInitializers(i){i.type.behaviours.forEach(function(t){var e;(e=i["construct"+t+"Trait"])&&e.call(i)})}function igniteConstructMethod(t,e){is(t.construct,"function")&&t.construct.apply(t,arg(e))}function upgradePrototype(){extendPrototype({type:root,is:root.is,behave:root.behave,super:root.super})}this.name=capitalize(name),this.types=[this.name],this.behaviours=[],this.parent=null,this.instance=null,this.constructor=eval("( function "+this.name+"(){})"),this.use=function(t){return arg(arguments).forEach(function(t){renameTraitConstructMethod(t),extendPrototype(t.properties),this.behaviours=this.behaviours.concat(t.types)},this),this},this.prototype=function(t){return extendPrototype(t),this.parent&&inherit(this.parent.constructor.prototype),renameTraitMethods(),handleStaticProps(),upgradePrototype(),this},this.extends=function(t){return this.parent=t,this.types=this.types.concat(t.types),this.behaviours=this.behaviours.concat(t.behaviours),this},this.new=function(){var t=new this.constructor;return callTraitInitializers(t),igniteConstructMethod(t,arguments),t},this.singleton=function(){return this.instance||(this.instance=this.new.apply(this,arg(arguments)))},this.static=function(t,e){var i,r=this.constructor;if("value"in(e=e||{})&&(r[t]=e.value),i=r[t]){if("args"in e){if(!is(i,"function"))throw TypeError(this.name+"."+t+" bir metot değil!");return i.apply(r.prototype,e.args)}return i}},this.is=function(t){return t instanceof Type&&(t=t.name),this instanceof Type?-1<this.types.indexOf(t):!!(this.type&&this.type instanceof Type)&&-1<this.type.types.indexOf(t)},this.behave=function(t){return t instanceof Trait&&(t=t.name),this instanceof Type?-1<this.behaviours.indexOf(t):!!(this.type&&this.type instanceof Type)&&-1<this.type.behaviours.indexOf(t)},this.super=function(){var t=is(this,Type)?this.parent:this.type.parent;if(t){if(t=t.constructor.prototype,0==arguments.length)return t;var e="construct",i=arg(arguments);return 2==i.length&&is(i[0],"string")&&is(i[1],"array")?(e=i.shift(),i=i.shift()):1==i.length&&is(i[0],"string")&&(e=i.shift()),t[e].apply(this,i)}}}});